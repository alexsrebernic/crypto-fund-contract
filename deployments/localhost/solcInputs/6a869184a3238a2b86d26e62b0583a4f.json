{
  "language": "Solidity",
  "sources": {
    "contracts/Donations.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\nimport \"./Donee.sol\";\nerror UserAlreadyCreateDonee();\ncontract Donations {\n    address payable public owner;\n    userAddressAndContractdAdress[] public donees;\n    struct userAddressAndContractdAdress {\n        address user_address;\n        address contract_address;\n    }\n    mapping(address => address) public userToDonee;\n    event newDonee (address _donee_contract);\n    event donation (address  _from, address _to,  uint amount);\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert FundMe__NotOwner();\n        _;\n    }\n    constructor() {\n        owner = payable(msg.sender);\n    }\n    function emitDonation(address  _from, address _to,  uint _amount) external {\n        emit donation(_from, _to, _amount);\n    }\n    function pushDonee(address _user,address _doneeContract) external {\n        if(userToDonee[_user] == _doneeContract) revert UserAlreadyCreateDonee();\n        donees.push(userAddressAndContractdAdress(_user, _doneeContract));\n        emit newDonee(_doneeContract);\n    }\n    function killContract() external onlyOwner {\n        selfdestruct(owner);\n    }\n    function getDonees() public view onlyOwner returns(userAddressAndContractdAdress[] memory) {\n        return donees;\n    }\n}\n"
    },
    "contracts/Donee.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nerror InsufficientBalance(uint256 required);\nerror FundMe__NotOwner();\n\nimport \"./Donations.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\ncontract Donee {\n    address private immutable i_owner;\n    uint public constant MINIMUN_USD = 1 * 1e18;\n    address[] private s_donors;\n    mapping(address => uint256) private s_addressToAmountDonated;\n    DonationsInterface private immutable donationsContract;\n    AggregatorV3Interface private immutable aggregatorV3Contract;\n    DataDonee public  dataDonee;\n\n    struct DataDonee {\n        address owner;\n        uint  balance;\n        string  first_name;\n        string  last_name;\n        string  avatar_color;\n        string details;\n        string  created_at;\n        address contract_address;\n    }\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n    constructor(string memory _firstName, string memory _lastName, string memory _avatarColor,string memory _details, string memory _createdAt,address _aggregatorV3Interface, address _donationsInterface){\n        i_owner = msg.sender;\n        donationsContract = DonationsInterface( _donationsInterface );\n        aggregatorV3Contract = AggregatorV3Interface( _aggregatorV3Interface );\n        donationsContract.pushDonee( msg.sender, address(this) );\n        dataDonee = DataDonee (\n            msg.sender,\n            0,\n            _firstName,\n            _lastName,\n            _avatarColor,\n            _details,\n            _createdAt,\n            address(this)\n        );\n    }\n    function donate() public payable {\n        if(getConversionRate(msg.value) < MINIMUN_USD){ \n                revert InsufficientBalance({\n                required: MINIMUN_USD\n            });\n        }\n        s_addressToAmountDonated[msg.sender] += msg.value;\n        s_donors.push(msg.sender);\n        dataDonee.balance += msg.value;\n        donationsContract.emitDonation( msg.sender, address(this),  msg.value );\n    }\n    function withdraw() public onlyOwner {\n        address[] memory donors = s_donors;\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < donors.length;\n            funderIndex++\n        ) {\n            address funder = donors[funderIndex];\n            s_addressToAmountDonated[funder] = 0;\n        }\n        s_donors = new address[](0);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n    function getPrice() internal view returns(uint256) {\n        (, int256 price,,,) = aggregatorV3Contract.latestRoundData();\n        return uint(price * 1e10);\n    }\n    function getConversionRate(uint256 ethAmount) public view returns (uint256){\n        uint256 ethPrice = getPrice();\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n    function getAddressAmountDonated( address _donor ) internal view returns (uint256) {\n        return s_addressToAmountDonated[_donor];\n    }\n    function getDataDonee() external view returns (DataDonee memory) {\n        return dataDonee;\n    }\n}\ninterface DonationsInterface {\n    function pushDonee( address, address ) external ;\n    function emitDonation( address, address, uint) external;\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}