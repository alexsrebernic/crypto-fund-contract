{
  "language": "Solidity",
  "sources": {
    "contracts/Donee.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nerror InsufficientBalance(uint required);\nerror FundMe__NotOwner();\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\ncontract Donee {\n    address private immutable i_owner;\n    uint public MINIMUN_USD = 1 * 1e18;\n    address[] public s_donors;\n    mapping(address => uint256) public s_addressToAmountDonated;\n    AggregatorV3Interface private immutable aggregatorV3Contract;\n    string public first_name;\n    string public last_name;\n    string public avatar_color;\n    string public details;\n    uint public created_at;\n    event donation( address _from, uint _amount );\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n    constructor(string memory _firstName, string memory _lastName, string memory _avatarColor,string memory _details,address _aggregatorV3Interface){\n        i_owner = msg.sender;\n        first_name = _firstName;\n        last_name = _lastName;\n        avatar_color = _avatarColor;\n        details = _details;\n        created_at = block.timestamp;\n        aggregatorV3Contract = AggregatorV3Interface( _aggregatorV3Interface );\n    }\n    function donate() public payable {\n        if(getConversionRate(msg.value) < MINIMUN_USD){ \n                revert InsufficientBalance({\n                required: MINIMUN_USD\n            });\n        }\n        s_addressToAmountDonated[msg.sender] += msg.value;\n        s_donors.push(msg.sender);\n        emit donation(msg.sender, msg.value);\n    }\n    function withdraw() public onlyOwner {\n        address[] memory donors = s_donors;\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < donors.length;\n            funderIndex++\n        ) {\n            address funder = donors[funderIndex];\n            s_addressToAmountDonated[funder] = 0;\n        }\n        s_donors = new address[](0);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n    function getPrice() internal view returns(uint256) {\n        (, int256 price,,,) = aggregatorV3Contract.latestRoundData();\n        return uint(price * 1e10);\n    }\n    function getConversionRate(uint256 ethAmount) internal view returns (uint256){\n        uint256 ethPrice = getPrice();\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n    function getDataDonee() external view returns ( string memory ,  string memory ,  string memory ,  string memory, uint , uint , address ) {\n        return ( first_name, last_name, details, avatar_color, address(this).balance, created_at, address(this) );\n    }\n    function getDonors() external view returns (address[] memory){\n        return s_donors;\n    }\n    function getDonor(uint256 index) external view returns (address){\n        return s_donors[index];\n    }\n    function getCurrentBalance() external view returns ( uint ){\n        return address(this).balance;\n    }\n    function getMinimunUsd() external view returns ( uint ){\n        return MINIMUN_USD;\n    }\n    function changeMinimunUsd(uint _amount) public onlyOwner(){\n        MINIMUN_USD = _amount * 1e18;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}